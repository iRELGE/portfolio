// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Userprofile is an object representing the database table.
type Userprofile struct {
	ID       int    `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	UserID   int    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Email    string `boil:"Email" json:"Email,omitempty" toml:"Email" yaml:"Email,omitempty"`
	Name     string `boil:"Name" json:"Name,omitempty" toml:"Name" yaml:"Name,omitempty"`
	LastName string `boil:"LastName" json:"LastName,omitempty" toml:"LastName" yaml:"LastName,omitempty"`
	Photo    string `boil:"Photo" json:"Photo,omitempty" toml:"Photo" yaml:"Photo,omitempty"`
	Adress   string `boil:"Adress" json:"Adress,omitempty" toml:"Adress" yaml:"Adress,omitempty"`
	Phone    string `boil:"Phone" json:"Phone,omitempty" toml:"Phone" yaml:"Phone,omitempty"`

	R *userprofileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userprofileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserprofileColumns = struct {
	ID       string
	UserID   string
	Email    string
	Name     string
	LastName string
	Photo    string
	Adress   string
	Phone    string
}{
	ID:       "ID",
	UserID:   "user_id",
	Email:    "Email",
	Name:     "Name",
	LastName: "LastName",
	Photo:    "Photo",
	Adress:   "Adress",
	Phone:    "Phone",
}

// Generated where

var UserprofileWhere = struct {
	ID       whereHelperint
	UserID   whereHelperint
	Email    whereHelpernull_String
	Name     whereHelpernull_String
	LastName whereHelpernull_String
	Photo    whereHelpernull_String
	Adress   whereHelpernull_String
	Phone    whereHelpernull_String
}{
	ID:       whereHelperint{field: "`userprofile`.`ID`"},
	UserID:   whereHelperint{field: "`userprofile`.`user_id`"},
	Email:    whereHelpernull_String{field: "`userprofile`.`Email`"},
	Name:     whereHelpernull_String{field: "`userprofile`.`Name`"},
	LastName: whereHelpernull_String{field: "`userprofile`.`LastName`"},
	Photo:    whereHelpernull_String{field: "`userprofile`.`Photo`"},
	Adress:   whereHelpernull_String{field: "`userprofile`.`Adress`"},
	Phone:    whereHelpernull_String{field: "`userprofile`.`Phone`"},
}

// UserprofileRels is where relationship names are stored.
var UserprofileRels = struct {
	User string
}{
	User: "User",
}

// userprofileR is where relationships are stored.
type userprofileR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userprofileR) NewStruct() *userprofileR {
	return &userprofileR{}
}

// userprofileL is where Load methods for each relationship are stored.
type userprofileL struct{}

var (
	userprofileAllColumns            = []string{"ID", "user_id", "Email", "Name", "LastName", "Photo", "Adress", "Phone"}
	userprofileColumnsWithoutDefault = []string{"user_id", "Email", "Name", "LastName", "Photo", "Adress", "Phone"}
	userprofileColumnsWithDefault    = []string{"ID"}
	userprofilePrimaryKeyColumns     = []string{"ID"}
)

type (
	// UserprofileSlice is an alias for a slice of pointers to Userprofile.
	// This should generally be used opposed to []Userprofile.
	UserprofileSlice []*Userprofile
	// UserprofileHook is the signature for custom Userprofile hook methods
	UserprofileHook func(context.Context, boil.ContextExecutor, *Userprofile) error

	userprofileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userprofileType                 = reflect.TypeOf(&Userprofile{})
	userprofileMapping              = queries.MakeStructMapping(userprofileType)
	userprofilePrimaryKeyMapping, _ = queries.BindMapping(userprofileType, userprofileMapping, userprofilePrimaryKeyColumns)
	userprofileInsertCacheMut       sync.RWMutex
	userprofileInsertCache          = make(map[string]insertCache)
	userprofileUpdateCacheMut       sync.RWMutex
	userprofileUpdateCache          = make(map[string]updateCache)
	userprofileUpsertCacheMut       sync.RWMutex
	userprofileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userprofileBeforeInsertHooks []UserprofileHook
var userprofileBeforeUpdateHooks []UserprofileHook
var userprofileBeforeDeleteHooks []UserprofileHook
var userprofileBeforeUpsertHooks []UserprofileHook

var userprofileAfterInsertHooks []UserprofileHook
var userprofileAfterSelectHooks []UserprofileHook
var userprofileAfterUpdateHooks []UserprofileHook
var userprofileAfterDeleteHooks []UserprofileHook
var userprofileAfterUpsertHooks []UserprofileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Userprofile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Userprofile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Userprofile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Userprofile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Userprofile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Userprofile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Userprofile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Userprofile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Userprofile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userprofileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserprofileHook registers your hook function for all future operations.
func AddUserprofileHook(hookPoint boil.HookPoint, userprofileHook UserprofileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userprofileBeforeInsertHooks = append(userprofileBeforeInsertHooks, userprofileHook)
	case boil.BeforeUpdateHook:
		userprofileBeforeUpdateHooks = append(userprofileBeforeUpdateHooks, userprofileHook)
	case boil.BeforeDeleteHook:
		userprofileBeforeDeleteHooks = append(userprofileBeforeDeleteHooks, userprofileHook)
	case boil.BeforeUpsertHook:
		userprofileBeforeUpsertHooks = append(userprofileBeforeUpsertHooks, userprofileHook)
	case boil.AfterInsertHook:
		userprofileAfterInsertHooks = append(userprofileAfterInsertHooks, userprofileHook)
	case boil.AfterSelectHook:
		userprofileAfterSelectHooks = append(userprofileAfterSelectHooks, userprofileHook)
	case boil.AfterUpdateHook:
		userprofileAfterUpdateHooks = append(userprofileAfterUpdateHooks, userprofileHook)
	case boil.AfterDeleteHook:
		userprofileAfterDeleteHooks = append(userprofileAfterDeleteHooks, userprofileHook)
	case boil.AfterUpsertHook:
		userprofileAfterUpsertHooks = append(userprofileAfterUpsertHooks, userprofileHook)
	}
}

// One returns a single userprofile record from the query.
func (q userprofileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Userprofile, error) {
	o := &Userprofile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for userprofile")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Userprofile records from the query.
func (q userprofileQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserprofileSlice, error) {
	var o []*Userprofile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Userprofile slice")
	}

	if len(userprofileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Userprofile records in the query.
func (q userprofileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count userprofile rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userprofileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if userprofile exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Userprofile) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ID` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userprofileL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserprofile interface{}, mods queries.Applicator) error {
	var slice []*Userprofile
	var object *Userprofile

	if singular {
		object = maybeUserprofile.(*Userprofile)
	} else {
		slice = *maybeUserprofile.(*[]*Userprofile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userprofileR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userprofileR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.ID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userprofileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Userprofiles = append(foreign.R.Userprofiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Userprofiles = append(foreign.R.Userprofiles, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userprofile to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Userprofiles.
func (o *Userprofile) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `userprofile` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userprofilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userprofileR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Userprofiles: UserprofileSlice{o},
		}
	} else {
		related.R.Userprofiles = append(related.R.Userprofiles, o)
	}

	return nil
}

// Userprofiles retrieves all the records using an executor.
func Userprofiles(mods ...qm.QueryMod) userprofileQuery {
	mods = append(mods, qm.From("`userprofile`"))
	return userprofileQuery{NewQuery(mods...)}
}

// FindUserprofile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserprofile(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Userprofile, error) {
	userprofileObj := &Userprofile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `userprofile` where `ID`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userprofileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from userprofile")
	}

	return userprofileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Userprofile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no userprofile provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userprofileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userprofileInsertCacheMut.RLock()
	cache, cached := userprofileInsertCache[key]
	userprofileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userprofileAllColumns,
			userprofileColumnsWithDefault,
			userprofileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userprofileType, userprofileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userprofileType, userprofileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `userprofile` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `userprofile` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `userprofile` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userprofilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into userprofile")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userprofileMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for userprofile")
	}

CacheNoHooks:
	if !cached {
		userprofileInsertCacheMut.Lock()
		userprofileInsertCache[key] = cache
		userprofileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Userprofile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Userprofile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userprofileUpdateCacheMut.RLock()
	cache, cached := userprofileUpdateCache[key]
	userprofileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userprofileAllColumns,
			userprofilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update userprofile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `userprofile` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userprofilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userprofileType, userprofileMapping, append(wl, userprofilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update userprofile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for userprofile")
	}

	if !cached {
		userprofileUpdateCacheMut.Lock()
		userprofileUpdateCache[key] = cache
		userprofileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userprofileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for userprofile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for userprofile")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserprofileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userprofilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `userprofile` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userprofilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userprofile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userprofile")
	}
	return rowsAff, nil
}

var mySQLUserprofileUniqueColumns = []string{
	"ID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Userprofile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no userprofile provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userprofileColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserprofileUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userprofileUpsertCacheMut.RLock()
	cache, cached := userprofileUpsertCache[key]
	userprofileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userprofileAllColumns,
			userprofileColumnsWithDefault,
			userprofileColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userprofileAllColumns,
			userprofilePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert userprofile, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "userprofile", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `userprofile` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userprofileType, userprofileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userprofileType, userprofileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for userprofile")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userprofileMapping["ID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userprofileType, userprofileMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for userprofile")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for userprofile")
	}

CacheNoHooks:
	if !cached {
		userprofileUpsertCacheMut.Lock()
		userprofileUpsertCache[key] = cache
		userprofileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Userprofile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Userprofile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Userprofile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userprofilePrimaryKeyMapping)
	sql := "DELETE FROM `userprofile` WHERE `ID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from userprofile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for userprofile")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userprofileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userprofileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userprofile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for userprofile")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserprofileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userprofileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userprofilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `userprofile` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userprofilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userprofile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for userprofile")
	}

	if len(userprofileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Userprofile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserprofile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserprofileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserprofileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userprofilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `userprofile`.* FROM `userprofile` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userprofilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserprofileSlice")
	}

	*o = slice

	return nil
}

// UserprofileExists checks if the Userprofile row exists.
func UserprofileExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `userprofile` where `ID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if userprofile exists")
	}

	return exists, nil
}
