// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Comments", testComments)
	t.Run("Projects", testProjects)
	t.Run("Roles", testRoles)
	t.Run("Users", testUsers)
	t.Run("UserRoles", testUserRoles)
	t.Run("Userprofiles", testUserprofiles)
}

func TestDelete(t *testing.T) {
	t.Run("Comments", testCommentsDelete)
	t.Run("Projects", testProjectsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserRoles", testUserRolesDelete)
	t.Run("Userprofiles", testUserprofilesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Projects", testProjectsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserRoles", testUserRolesQueryDeleteAll)
	t.Run("Userprofiles", testUserprofilesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Projects", testProjectsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserRoles", testUserRolesSliceDeleteAll)
	t.Run("Userprofiles", testUserprofilesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Comments", testCommentsExists)
	t.Run("Projects", testProjectsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Users", testUsersExists)
	t.Run("UserRoles", testUserRolesExists)
	t.Run("Userprofiles", testUserprofilesExists)
}

func TestFind(t *testing.T) {
	t.Run("Comments", testCommentsFind)
	t.Run("Projects", testProjectsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Users", testUsersFind)
	t.Run("UserRoles", testUserRolesFind)
	t.Run("Userprofiles", testUserprofilesFind)
}

func TestBind(t *testing.T) {
	t.Run("Comments", testCommentsBind)
	t.Run("Projects", testProjectsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Users", testUsersBind)
	t.Run("UserRoles", testUserRolesBind)
	t.Run("Userprofiles", testUserprofilesBind)
}

func TestOne(t *testing.T) {
	t.Run("Comments", testCommentsOne)
	t.Run("Projects", testProjectsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Users", testUsersOne)
	t.Run("UserRoles", testUserRolesOne)
	t.Run("Userprofiles", testUserprofilesOne)
}

func TestAll(t *testing.T) {
	t.Run("Comments", testCommentsAll)
	t.Run("Projects", testProjectsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Users", testUsersAll)
	t.Run("UserRoles", testUserRolesAll)
	t.Run("Userprofiles", testUserprofilesAll)
}

func TestCount(t *testing.T) {
	t.Run("Comments", testCommentsCount)
	t.Run("Projects", testProjectsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Users", testUsersCount)
	t.Run("UserRoles", testUserRolesCount)
	t.Run("Userprofiles", testUserprofilesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Comments", testCommentsHooks)
	t.Run("Projects", testProjectsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserRoles", testUserRolesHooks)
	t.Run("Userprofiles", testUserprofilesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Projects", testProjectsInsert)
	t.Run("Projects", testProjectsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserRoles", testUserRolesInsert)
	t.Run("UserRoles", testUserRolesInsertWhitelist)
	t.Run("Userprofiles", testUserprofilesInsert)
	t.Run("Userprofiles", testUserprofilesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CommentToUserUsingUser", testCommentToOneUserUsingUser)
	t.Run("CommentToProjectUsingProject", testCommentToOneProjectUsingProject)
	t.Run("ProjectToUserUsingUser", testProjectToOneUserUsingUser)
	t.Run("UserRoleToUserUsingUser", testUserRoleToOneUserUsingUser)
	t.Run("UserRoleToRoleUsingRole", testUserRoleToOneRoleUsingRole)
	t.Run("UserprofileToUserUsingUser", testUserprofileToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ProjectToComments", testProjectToManyComments)
	t.Run("RoleToUserRoles", testRoleToManyUserRoles)
	t.Run("UserToComments", testUserToManyComments)
	t.Run("UserToProjects", testUserToManyProjects)
	t.Run("UserToUserRoles", testUserToManyUserRoles)
	t.Run("UserToUserprofiles", testUserToManyUserprofiles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CommentToUserUsingComments", testCommentToOneSetOpUserUsingUser)
	t.Run("CommentToProjectUsingComments", testCommentToOneSetOpProjectUsingProject)
	t.Run("ProjectToUserUsingProjects", testProjectToOneSetOpUserUsingUser)
	t.Run("UserRoleToUserUsingUserRoles", testUserRoleToOneSetOpUserUsingUser)
	t.Run("UserRoleToRoleUsingUserRoles", testUserRoleToOneSetOpRoleUsingRole)
	t.Run("UserprofileToUserUsingUserprofiles", testUserprofileToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ProjectToComments", testProjectToManyAddOpComments)
	t.Run("RoleToUserRoles", testRoleToManyAddOpUserRoles)
	t.Run("UserToComments", testUserToManyAddOpComments)
	t.Run("UserToProjects", testUserToManyAddOpProjects)
	t.Run("UserToUserRoles", testUserToManyAddOpUserRoles)
	t.Run("UserToUserprofiles", testUserToManyAddOpUserprofiles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Comments", testCommentsReload)
	t.Run("Projects", testProjectsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Users", testUsersReload)
	t.Run("UserRoles", testUserRolesReload)
	t.Run("Userprofiles", testUserprofilesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Projects", testProjectsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserRoles", testUserRolesReloadAll)
	t.Run("Userprofiles", testUserprofilesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Comments", testCommentsSelect)
	t.Run("Projects", testProjectsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserRoles", testUserRolesSelect)
	t.Run("Userprofiles", testUserprofilesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Comments", testCommentsUpdate)
	t.Run("Projects", testProjectsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserRoles", testUserRolesUpdate)
	t.Run("Userprofiles", testUserprofilesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Projects", testProjectsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserRoles", testUserRolesSliceUpdateAll)
	t.Run("Userprofiles", testUserprofilesSliceUpdateAll)
}
